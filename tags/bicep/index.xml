<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LederWorks â€“ bicep</title><link>https://lederworks.com/tags/bicep/</link><description>Recent content in bicep on LederWorks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://lederworks.com/tags/bicep/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Module Naming</title><link>https://lederworks.com/docs/module-standards/naming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lederworks.com/docs/module-standards/naming/</guid><description>
&lt;hr>
&lt;h2 id="naming">Naming&lt;/h2>
&lt;p>We are following the default &lt;a href="https://www.terraform.io/registry/modules/publish">naming conventions&lt;/a> enforced on the &lt;a href="https://registry.terraform.io/">Terraform Registry&lt;/a> for terraform modules.&lt;/p>
&lt;p>Each Brick and Wrapper needs its own repository in the &lt;a href="https://github.com/LederWorks">LederWorks Organization&lt;/a> based on the following rules for Bricks:&lt;/p>
&lt;p>&lt;code>language-provider-easy-brick-category-purpose&lt;/code>&lt;/p>
&lt;p>and for Wrappers:&lt;/p>
&lt;p>&lt;code>language-provider-easy-wrapper-purpose&lt;/code>&lt;/p>
&lt;ul>
&lt;li>Every word is delimited by hyphens.&lt;/li>
&lt;li>The first word of every module is the &lt;em>language&lt;/em> the majority of the code is written, eg. &lt;em>terraform&lt;/em>, &lt;em>bicep&lt;/em>, &lt;em>ansible&lt;/em>, &lt;em>golang&lt;/em> etc.&lt;/li>
&lt;li>The second word is either a terraform provider or a class used by the cloud API.&lt;/li>
&lt;li>The third word is &lt;em>easy&lt;/em>, you can replace that with your organization name for example.&lt;/li>
&lt;li>The fourth word is either the &lt;em>brick&lt;/em> or &lt;em>wrapper&lt;/em>, depends on the type of the module.&lt;/li>
&lt;li>The fifth word for Bricks is the category under the provider structure.&lt;/li>
&lt;li>The sixth (or fifth for Wreappers) and consequent words are the &lt;em>purpose&lt;/em>, which needs to be unique within the organization. We are suffixing the input parameters and variables with this using snake_case, eg. for:
&lt;code>terraform-azurerm-easy-container-aks-cluster&lt;/code> all variables will be prefixed with &lt;code>aks_cluster&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="terraform-bricks">Terraform Bricks&lt;/h3>
&lt;p>&lt;code>terraform-azurerm-easy-brick-compute-linux-vm&lt;/code>&lt;/p>
&lt;ul>
&lt;li>The second word is the provider the majority of the code is written in, eg. &lt;em>azurerm&lt;/em>, &lt;em>azuread&lt;/em>, &lt;em>kubernetes&lt;/em>, &lt;em>helm&lt;/em> etc.&lt;/li>
&lt;li>The third word is &lt;em>easy&lt;/em>. If you implementing these standards somewhere else, this most possible will be yout company, organization etc. name.&lt;/li>
&lt;li>The fourth word is either the &lt;em>brick&lt;/em> or &lt;em>wrapper&lt;/em>, depends on the type of the module.&lt;/li>
&lt;li>The fifth word is the category the resource under on the &lt;a href="https://registry.terraform.io/">Terraform Registry&lt;/a> documentation, eg. &lt;em>compute&lt;/em>, &lt;em>container&lt;/em>, &lt;em>storage&lt;/em> etc. If that is more than 2 word eg. &lt;em>Logic App&lt;/em>, the do not use any delimiters, write in a single word, eg. &lt;em>logicapp&lt;/em>.&lt;/li>
&lt;li>Any subsequent words should clearly state, what that module is used for eg., if it&amp;rsquo;s deploying a Linux VM, then it should be linux-vm.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="terraform-wrappers">Terraform Wrappers&lt;/h3>
&lt;p>&lt;code>terraform-azurerm-easy-wrapper-aks-cluster&lt;/code>&lt;/p>
&lt;ul>
&lt;li>The second word is the provider the majority of the code is written in, eg. &lt;em>azurerm&lt;/em>, &lt;em>azuread&lt;/em>, &lt;em>kubernetes&lt;/em>, &lt;em>helm&lt;/em> etc.&lt;/li>
&lt;li>The third word is &lt;em>easy&lt;/em>. If you implementing these standards somewhere else, this most possible will be yout company, organization etc. name.&lt;/li>
&lt;li>The fourth word is &lt;em>wrapper&lt;/em>.&lt;/li>
&lt;li>Any subsequent words should clearly state, what that module is used for and delimited by _. If it is deploying an AKS Cluster, then it should be aks-cluster.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="bicep-bricks">Bicep Bricks&lt;/h3>
&lt;p>&lt;code>bicep-managedidentity-easy-user-managed-identity&lt;/code>&lt;/p>
&lt;ul>
&lt;li>The second word is the second part of the &lt;a href="https://docs.microsoft.com/en-us/azure/templates/">ARM API Documentations&lt;/a> resource, eg. for Microsoft.Network/ it is going to be &lt;em>network&lt;/em>.&lt;/li>
&lt;li>The third word is &lt;em>easy&lt;/em>. If you implementing these standards somewhere else, this most possible will be yout company, organization etc. name.&lt;/li>
&lt;li>Any subsequent words should clearly state, what that module is used for. If it is deploying a DataBricks workspace it is going to be &lt;em>databricks-workspace&lt;/em>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="bicep-wrappers">Bicep Wrappers&lt;/h3>
&lt;p>&lt;code>bicep-easy-wrapper-databricks-isolated-vnet&lt;/code>&lt;/p>
&lt;ul>
&lt;li>The second word is &lt;em>easy&lt;/em>. If you implementing these standards somewhere else, this most possible will be yout company, organization etc. name.&lt;/li>
&lt;li>The third word is &lt;em>wrapper&lt;/em>.&lt;/li>
&lt;li>Any subsequent words should clearly state, what that module is used for. If it is deploying a DataBricks deployment in an island vnet, then it is going to be &lt;em>databricks-isolated-vnet&lt;/em>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="golang-modules">GoLang Modules&lt;/h3>
&lt;p>&lt;code>golang-easy-terratests&lt;/code>&lt;/p>
&lt;p>As Go Modules in general importing several packages, I do not think that we need to include this information in the name of the respective repository.&lt;/p>
&lt;ul>
&lt;li>The second word is &lt;em>easy&lt;/em>. If you implementing these standards somewhere else, this most possible will be yout company, organization etc. name.&lt;/li>
&lt;li>Any subsequent words should clearly state, what that module is used for. If it is used for terratests, then it should be &lt;em>terratests&lt;/em>.&lt;/li>
&lt;/ul></description></item></channel></rss>